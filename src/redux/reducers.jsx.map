{"version":3,"file":"reducers.jsx","sourceRoot":"","sources":["reducers.tsx"],"names":[],"mappings":"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","sourcesContent":["import Actions, { GlobalAction } from './actions';\r\nimport { getRandomId } from '../tools/tools';\r\nimport {\r\n  MembersType,\r\n  RowsType,\r\n  MemberType,\r\n  UnsavedChangesType,\r\n} from '../tools/globalTypes';\r\n\r\n/*\r\n* Types\r\n* */\r\nexport interface BaseStateType {\r\n  members : MembersType | Array<any>,\r\n  rows : RowsType,\r\n  unsavedChanges : UnsavedChangesType\r\n}\r\n\r\n/*\r\n* Reducers\r\n* */\r\nconst defaultState : BaseStateType = {\r\n  members : [],\r\n  rows : [],\r\n  unsavedChanges : {}\r\n};\r\n\r\nfunction setMembersData(state : BaseStateType, action : GlobalAction) {\r\n  const {members} = action;\r\n  let rows : RowsType = [];\r\n\r\n  members && members.forEach(member => {\r\n    rows.push({\r\n      person_id : member.person_id,\r\n      role : \"\",\r\n      access_level : \"\"\r\n    });\r\n  });\r\n\r\n  return {\r\n    ...state,\r\n    members,\r\n    rows\r\n  };\r\n}\r\n\r\nfunction addNewMember(state : BaseStateType, action : GlobalAction) {\r\n  const {member} = action;\r\n  const newMembers = [...state.members];\r\n  const alreadyExist = newMembers.find((currMember : MemberType) => currMember.person_id === member.person_id);\r\n\r\n  if (!alreadyExist) {\r\n    newMembers.push({\r\n      ...member,\r\n      person_id : getRandomId()\r\n    });\r\n  }\r\n\r\n  return {\r\n    ...state,\r\n    members : newMembers\r\n  };\r\n}\r\n\r\nfunction addNewRow(state : BaseStateType) {\r\n  return {\r\n    ...state,\r\n    rows : [\r\n      ...state.rows,\r\n      {\r\n        person_id : null,\r\n        role : null,\r\n        access_level : null\r\n      }\r\n    ]\r\n  };\r\n}\r\n\r\nfunction removeRow(state : BaseStateType, action : GlobalAction) {\r\n  const {rowIndex} = action;\r\n  const newRows = [...state.rows].filter((row, index) => index !== rowIndex);\r\n\r\n  return {\r\n    ...state,\r\n    rows : newRows\r\n  };\r\n}\r\n\r\nfunction changeUnsavedProperty(state : BaseStateType, rowIndex : number, propertyName : string, newValue : string) {\r\n  let newUnsavedChanges : UnsavedChangesType = {...state.unsavedChanges};\r\n\r\n  if (!newUnsavedChanges[rowIndex]) {\r\n    newUnsavedChanges[rowIndex] = {};\r\n  }\r\n\r\n  newUnsavedChanges[rowIndex][propertyName] = newValue;\r\n\r\n  return newUnsavedChanges;\r\n}\r\n\r\nfunction memberChanged(state : BaseStateType, action : GlobalAction) {\r\n  const {rowIndex, memberId} = action;\r\n  const newUnsavedChanges = changeUnsavedProperty(state, rowIndex, \"person_id\", memberId);\r\n\r\n  return {\r\n    ...state,\r\n    unsavedChanges : newUnsavedChanges\r\n  };\r\n}\r\n\r\nfunction memberRoleChanged(state : BaseStateType, action : GlobalAction) {\r\n  const {rowIndex, role} = action;\r\n  const newUnsavedChanges = changeUnsavedProperty(state, rowIndex, \"role\", role);\r\n\r\n  return {\r\n    ...state,\r\n    unsavedChanges : newUnsavedChanges\r\n  };\r\n}\r\n\r\nfunction memberAccessLevelChanged(state : BaseStateType, action : GlobalAction) {\r\n  const {rowIndex, accessLevel} = action;\r\n  const newUnsavedChanges = changeUnsavedProperty(state, rowIndex, \"access_level\", accessLevel);\r\n\r\n  return {\r\n    ...state,\r\n    unsavedChanges : newUnsavedChanges\r\n  };\r\n}\r\n\r\nfunction saveChanges(state : BaseStateType) {\r\n  const {unsavedChanges} = state;\r\n  const newRows = [...state.rows];\r\n\r\n  if (unsavedChanges) {\r\n    newRows.forEach((row, index) => {\r\n      const hasUnsavedChanges = unsavedChanges[index];\r\n\r\n      if (hasUnsavedChanges) {\r\n        newRows[index] = {\r\n          ...row,\r\n          ...hasUnsavedChanges\r\n        };\r\n      }\r\n    });\r\n  }\r\n\r\n  return {\r\n    ...state,\r\n    rows : newRows,\r\n    unsavedChanges : {}\r\n  };\r\n}\r\n\r\nexport default function(state = {...defaultState}, action : GlobalAction) {\r\n  let newState;\r\n\r\n  switch (action.type) {\r\n    case Actions.SET_MEMBERS_DATA :\r\n      newState = setMembersData(state, action);\r\n      break;\r\n    case Actions.ADD_NEW_MEMBER :\r\n      newState = addNewMember(state, action);\r\n      break;\r\n    case Actions.ADD_NEW_ROW :\r\n      newState = addNewRow(state);\r\n      break;\r\n    case Actions.REMOVE_ROW :\r\n      newState = removeRow(state, action);\r\n      break;\r\n    case Actions.MEMBER_CHANGED :\r\n      newState = memberChanged(state, action);\r\n      break;\r\n    case Actions.MEMBER_ROLE_CHANGED :\r\n      newState = memberRoleChanged(state, action);\r\n      break;\r\n    case Actions.MEMBER_ACCESS_LEVEL_CHANGED :\r\n      newState = memberAccessLevelChanged(state, action);\r\n      break;\r\n    case Actions.SAVE_CHANGES :\r\n      newState = saveChanges(state);\r\n      break;\r\n    default :\r\n      newState = state;\r\n      break;\r\n  }\r\n\r\n  return newState;\r\n}"]}