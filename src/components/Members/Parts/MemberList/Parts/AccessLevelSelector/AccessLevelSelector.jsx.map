{"version":3,"file":"AccessLevelSelector.jsx","sourceRoot":"","sources":["AccessLevelSelector.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { MemberAccessLevelChangedType, memberAccessLevelChanged } from '../../../../../../redux/actions';\r\nimport { StyledAccessLevelSelector } from './AccessLevelSelector.style';\r\nimport { BaseStateType } from '../../../../../../redux/reducers';\r\nimport {\r\n  AccessLevelType,\r\n  MembersType,\r\n  RoleType,\r\n  RowsType,\r\n  UnsavedChangesType,\r\n} from '../../../../../../tools/globalTypes';\r\nimport { DataRoleType } from '../RoleSelector/RoleSelector';\r\nimport RolesData from './../../../../../../data/roles.json';\r\nimport AccessLevels from './../../../../../../data/accessLevels.json';\r\nimport { StyledRoleSelector } from '../RoleSelector/RoleSelector.style';\r\n\r\n// Types\r\ninterface AccessLevelSelectorType {\r\n  dispatch : (action: MemberAccessLevelChangedType) => void,\r\n  rowIndex : number,\r\n  members : MembersType,\r\n  rows : RowsType,\r\n  selectedAccessLevel : AccessLevelType,\r\n  selectedRole : RoleType,\r\n  unsavedChanges : UnsavedChangesType,\r\n}\r\n\r\n// Main\r\nclass AccessLevelSelector extends React.Component<AccessLevelSelectorType> {\r\n  constructor(props : AccessLevelSelectorType) {\r\n    super(props);\r\n\r\n    this.onChange = this.onChange.bind(this);\r\n  }\r\n\r\n  onChange(newAccessLevel : any) {\r\n    const {dispatch, rowIndex} = this.props;\r\n\r\n    dispatch(memberAccessLevelChanged(rowIndex, newAccessLevel));\r\n  }\r\n\r\n  getOptions() {\r\n    const selectedRole = this.getSelectedRole();\r\n    const currentRole = RolesData.find((role : DataRoleType) => role.name === selectedRole);\r\n\r\n    return AccessLevels\r\n      .filter(accessLevel => currentRole ? currentRole.allowedAccessLevels.indexOf(accessLevel) > -1 : null)\r\n      .map((accessLevel : string) => ({\r\n        \"id\" : accessLevel,\r\n        \"label\" : accessLevel\r\n      }));\r\n  }\r\n\r\n  getRealSelectedProperty(propertyName, selectedProperty) {\r\n    const {unsavedChanges, rowIndex} = this.props;\r\n    const hasUnsavedAccessLevel = unsavedChanges && unsavedChanges[rowIndex] && unsavedChanges[rowIndex][propertyName];\r\n\r\n    // @ts-ignore\r\n    return hasUnsavedAccessLevel ? unsavedChanges[rowIndex][propertyName] : selectedProperty;\r\n  }\r\n\r\n  getSelectedAccessLevel() {\r\n    const {selectedAccessLevel} = this.props;\r\n    return this.getRealSelectedProperty(\"access_level\", selectedAccessLevel);\r\n  }\r\n\r\n  getSelectedRole() {\r\n    const {selectedRole} = this.props;\r\n    return this.getRealSelectedProperty(\"role\", selectedRole);\r\n  }\r\n\r\n  render() {\r\n    const options = this.getOptions();\r\n    const selectedId = this.getSelectedAccessLevel();\r\n\r\n    return (\r\n      <StyledAccessLevelSelector\r\n        noOptionsMessage={\"Choose the role please\"}\r\n        placeholder={\"Choose access level\"}\r\n        onChange={this.onChange}\r\n        options={options}\r\n        selectedId={selectedId}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state : BaseStateType) => {\r\n  const {rows, members, unsavedChanges} = state;\r\n\r\n  return ({\r\n    rows,\r\n    members,\r\n    unsavedChanges\r\n  })\r\n};\r\n\r\nexport default connect(mapStateToProps)(AccessLevelSelector);"]}