{"version":3,"file":"MemberSelector.jsx","sourceRoot":"","sources":["MemberSelector.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { MemberChangedType, memberChanged } from '../../../../../../redux/actions';\r\nimport { StyledMemberSelector } from './MemberSelector.style';\r\nimport { BaseStateType } from '../../../../../../redux/reducers';\r\nimport {\r\n  MemberIdType,\r\n  MembersType,\r\n  MemberType,\r\n  RowsType,\r\n  RowType,\r\n  UnsavedChangesType\r\n} from '../../../../../../tools/globalTypes';\r\n\r\n// Types\r\ninterface MemberSelectorType {\r\n  dispatch : (action: MemberChangedType) => void,\r\n  rowIndex : number,\r\n  members : MembersType,\r\n  rows : RowsType,\r\n  unsavedChanges : UnsavedChangesType,\r\n  selectedPersonId : MemberIdType\r\n}\r\n\r\n// Main\r\nclass MemberSelector extends React.Component<MemberSelectorType> {\r\n  constructor(props : MemberSelectorType) {\r\n    super(props);\r\n\r\n    this.onChange = this.onChange.bind(this);\r\n  }\r\n\r\n  onChange(newPersonId : any) {\r\n    const {dispatch, rowIndex} = this.props;\r\n\r\n    dispatch(memberChanged(rowIndex, newPersonId));\r\n  }\r\n\r\n  getCurrentRowUnsavedChangesHasMember(rowIndex, memberId) {\r\n    const {unsavedChanges} = this.props;\r\n    let unsavedChangesHasMemberId = false;\r\n\r\n    if (unsavedChanges && unsavedChanges[rowIndex]) {\r\n        unsavedChangesHasMemberId = unsavedChanges[rowIndex].person_id !== memberId;\r\n    }\r\n\r\n    return unsavedChangesHasMemberId;\r\n  }\r\n\r\n  getAnyOtherUnsavedChangesHasMember(memberId) {\r\n    const {unsavedChanges} = this.props;\r\n    let anyOtherUnsavedChangesHasMember = false;\r\n\r\n    if (unsavedChanges) {\r\n      Object.keys(unsavedChanges).forEach(key => {\r\n        const currentUnsavedChanges = unsavedChanges[key];\r\n\r\n        if (!anyOtherUnsavedChangesHasMember && currentUnsavedChanges) {\r\n          anyOtherUnsavedChangesHasMember = currentUnsavedChanges.person_id === memberId;\r\n        }\r\n      });\r\n    }\r\n\r\n    return anyOtherUnsavedChangesHasMember;\r\n  }\r\n\r\n  getOptions(selectedPersonId) {\r\n    const {members, rows} = this.props;\r\n\r\n    return members.filter((member : MemberType) => {\r\n      const memberAlreadySelected = rows.find((row : RowType, index : number) => {\r\n        const currentRowUnsavedChangesHasMemberId = this.getCurrentRowUnsavedChangesHasMember(index, member.person_id);\r\n        const anyOtherUnsavedChangesHasMember = this.getAnyOtherUnsavedChangesHasMember(member.person_id);\r\n\r\n        return (\r\n          (\r\n            row.person_id === member.person_id && !currentRowUnsavedChangesHasMemberId) ||\r\n            anyOtherUnsavedChangesHasMember\r\n          ) &&\r\n          member.person_id !== selectedPersonId;\r\n      });\r\n\r\n      return !memberAlreadySelected;\r\n    }).map((member : MemberType) => ({\r\n      \"id\" : member.person_id,\r\n      \"label\" : `${member.firstname} ${member.lastname}`\r\n    }));\r\n  }\r\n\r\n  getSelectedMember() {\r\n    const property = \"person_id\";\r\n    const {selectedPersonId, unsavedChanges, rowIndex} = this.props;\r\n    const hasUnsavedPersonId = unsavedChanges && unsavedChanges[rowIndex] && unsavedChanges[rowIndex][property];\r\n\r\n    // @ts-ignore\r\n    return hasUnsavedPersonId ? unsavedChanges[rowIndex][property] : selectedPersonId;\r\n  }\r\n\r\n  render() {\r\n    const selectedPersonId = this.getSelectedMember();\r\n    const options = this.getOptions(selectedPersonId);\r\n\r\n    return (\r\n      <StyledMemberSelector\r\n        noOptionsMessage={\"All members are selected\"}\r\n        placeholder={\"Choose member\"}\r\n        onChange={this.onChange}\r\n        options={options}\r\n        selectedId={selectedPersonId}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\n// Store connection\r\nconst mapStateToProps = (state : BaseStateType) => {\r\n  const {rows, members, unsavedChanges} = state;\r\n\r\n  return ({\r\n    rows,\r\n    members,\r\n    unsavedChanges\r\n  })\r\n};\r\n\r\nexport default connect(mapStateToProps)(MemberSelector);\r\n"]}