{"version":3,"file":"Field.jsx","sourceRoot":"","sources":["Field.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EAAE,SAAS,EAAE,KAAK,EAAE,KAAK,EAAE,YAAY,EAAE,MAAM,eAAe,CAAC;AAetE,OAAO;AACP,SAAS,mBAAmB,CAAC,YAAY,EAAE,KAAK,EAAE,KAAK,EAAE,QAAQ;IAC/D,IAAI,gBAAgB,CAAC;IAErB,IAAI,QAAQ,IAAI,CAAC,KAAK,EAAE;QACtB,gBAAgB,GAAM,KAAK,yCAAsC,CAAC;KACnE;IACD,IAAI,YAAY,EAAE;QAChB,gBAAgB,GAAG,YAAY,CAAC;KACjC;IAED,OAAO,gBAAgB,CAAC;AAC1B,CAAC;AACD,gBAAe,UAAC,EAAiG;QAA/F,IAAI,UAAA,EAAE,IAAI,UAAA,EAAE,KAAK,WAAA,EAAE,YAAY,kBAAA,EAAE,WAAW,iBAAA,EAAE,KAAK,WAAA,EAAE,QAAQ,cAAA,EAAE,QAAQ,cAAA,EAAE,QAAQ,cAAA;IACjG,IAAM,gBAAgB,GAAG,QAAQ,CAAC,CAAC,CAAC,mBAAmB,CAAC,YAAY,EAAE,KAAK,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;IACrG,IAAM,mBAAmB,GAAG,UAAA,KAAK;QAC/B,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;IAC/B,CAAC,CAAC;IAEF,OAAO,CACL,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAC5B;MAAA,CAAC,KAAK,CACJ,OAAO,CAAC,CAAC,IAAI,CAAC,CACd,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAEnB;QAAA,CAAC,KAAK,CACR;MAAA,EAAE,KAAK,CACP;MAAA,CAAC,KAAK,CACJ,EAAE,CAAC,CAAC,IAAI,CAAC,CACT,IAAI,CAAC,CAAC,IAAI,CAAC,CACX,IAAI,CAAC,CAAC,IAAI,IAAI,MAAM,CAAC,CACrB,KAAK,CAAC,CAAC,KAAK,CAAC,CACb,QAAQ,CAAC,CAAC,QAAQ,CAAC,CACnB,WAAW,CAAC,CAAC,WAAW,CAAC,CACzB,QAAQ,CAAC,CAAC,mBAAmB,CAAC,EAEhC;MAAA,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAClB,CAAC,YAAY,CACX;UAAA,CAAC,gBAAgB,CACnB;QAAA,EAAE,YAAY,CAAC,CAChB,CAAC,CAAC,CAAC,IAAI,CACV;IAAA,EAAE,SAAS,CAAC,CACb,CAAA;AACH,CAAC,EAAC","sourcesContent":["import * as React from 'react';\r\nimport { Container, Field, Label, ErrorMessage } from './Field.style';\r\n\r\n// Types\r\nexport interface FieldType {\r\n  type ?: string,\r\n  name : string,\r\n  label : string,\r\n  placeholder ?: string,\r\n  errorMessage ?: string,\r\n  value : string,\r\n  onChange : (value : string) => void,\r\n  required ?: boolean,\r\n  hasError ?: boolean\r\n}\r\n\r\n// Main\r\nfunction getRealErrorMessage(errorMessage, label, value, required) {\r\n  let realErrorMessage;\r\n\r\n  if (required && !value) {\r\n    realErrorMessage = `${label} is required. Please fill this field`;\r\n  }\r\n  if (errorMessage) {\r\n    realErrorMessage = errorMessage;\r\n  }\r\n\r\n  return realErrorMessage;\r\n}\r\nexport default ({ type, name, label, errorMessage, placeholder, value, onChange, required, hasError } : FieldType) => {\r\n  const realErrorMessage = hasError ? getRealErrorMessage(errorMessage, label, value, required) : null;\r\n  const localChangeCallback = event => {\r\n    onChange(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <Container hasError={hasError}>\r\n      <Label\r\n        htmlFor={name}\r\n        required={required}\r\n      >\r\n        {label}\r\n      </Label>\r\n      <Field\r\n        id={name}\r\n        name={name}\r\n        type={type || \"text\"}\r\n        value={value}\r\n        required={required}\r\n        placeholder={placeholder}\r\n        onChange={localChangeCallback}\r\n      />\r\n      {realErrorMessage ? (\r\n        <ErrorMessage>\r\n          {realErrorMessage}\r\n        </ErrorMessage>\r\n      ) : null}\r\n    </Container>\r\n  )\r\n};\r\n"]}